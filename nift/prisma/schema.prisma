// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  user_id String @unique @db.Uuid // ユーザーID

  user_auth user_auth?
  user_detail user_detail?
  user_flag user_flag?
  reserved_nfts reserved_nfts[]

  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
}

model user_auth {
  foreign_id users @relation(fields: [user_id], references: [user_id])
  user_id String  @unique @db.Uuid

  email String @unique @db.VarChar(255)
  wallet_address String? @db.VarChar(255) // ウォレットアドレス

  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
}

model user_detail {
  foreign_id users @relation(fields: [user_id], references: [user_id])
  user_id String  @unique @db.Uuid

  user_name String @db.VarChar(50) // ユーザ名
  image_url String @db.VarChar(1024) // ユーザプロフィールのURL

  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
}

model user_flag {
  foreign_id users @relation(fields: [user_id], references: [user_id])
  user_id String  @unique @db.Uuid

  is_company Boolean @default(false)

  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
}

// Reserved NFT Model
model reserved_nfts {
  foreign_id  users @relation(fields: [user_id], references: [user_id])
  user_id String  @unique @db.Uuid

  series_id String @unique @db.Uuid

  series_image series_image?
  series_lot series_lot?
  series_detail series_detail?
  series_nfts series_nfts[]

  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
}

model series_image {
  foreign_id reserved_nfts @relation(fields: [series_id], references: [series_id])
  series_id String @unique @db.Uuid

  common_image_url String @db.VarChar(255)
  rare_image_url String @db.VarChar(255)
  veryrare_image_url String @db.VarChar(255)

  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
}

model series_lot {
  foreign_id reserved_nfts @relation(fields: [series_id], references: [series_id])
  series_id String @unique @db.Uuid

  total_lots Int @db.Integer
  total_used_lots Int @db.Integer
  veryrare_lots Int @db.Integer
  veryrare_used_lots Int @db.Integer
  rare_lots Int @db.Integer
  rare_used_lots Int @db.Integer

  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
}

model series_detail {
  foreign_id reserved_nfts @relation(fields: [series_id], references: [series_id])
  series_id String @unique @db.Uuid

  brand_name  String @db.VarChar(255)
  description  String @db.VarChar(255)
  royalty_first  Int @db.Integer
  royalty_second  Int @db.Integer

  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
}

model series_nfts {
  foreign_id reserved_nfts @relation(fields: [series_id], references: [series_id])
  series_id String @unique @db.Uuid

  nft_id String @unique @db.Uuid

  nft_status nft_status?

  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
}

model nft_status {
  foreign_id series_nfts @relation(fields: [nft_id], references: [nft_id])
  nft_id String @unique @db.Uuid
  
  nft_code Int @db.SmallInt
  is_used Boolean

  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
}


