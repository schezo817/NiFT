// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  reservedNfts  reserved_nfts[]
  userdetail    UserDetail?
  created_at    DateTime        @default(now())
  updated_at    DateTime        @updatedAt
}

model UserDetail {
  foreign_id     User     @relation(fields: [id], references: [id])
  id             String   @id
  user_name      String?
  wallet_address String?
  is_company     Boolean?
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([identifier, token])
}

// Reserved NFT Model
model reserved_nfts {
  foreign_id User   @relation(fields: [id], references: [id])
  id         String @id

  series_id String @unique @db.Uuid

  series_image  series_image?
  series_lot    series_lot?
  series_detail series_detail?
  series_nfts   series_nfts[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model series_image {
  foreign_id reserved_nfts @relation(fields: [series_id], references: [series_id])
  series_id  String        @unique @db.Uuid

  common_image_url   String @db.VarChar(255)
  rare_image_url     String @db.VarChar(255)
  veryrare_image_url String @db.VarChar(255)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model series_lot {
  foreign_id reserved_nfts @relation(fields: [series_id], references: [series_id])
  series_id  String        @unique @db.Uuid

  total_lots         Int @db.Integer
  total_used_lots    Int @db.Integer
  veryrare_lots      Int @db.Integer
  veryrare_used_lots Int @db.Integer
  rare_lots          Int @db.Integer
  rare_used_lots     Int @db.Integer

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model series_detail {
  foreign_id reserved_nfts @relation(fields: [series_id], references: [series_id])
  series_id  String        @unique @db.Uuid

  nft_name      String  @db.VarChar(255) // NFTの名前
  brand_name    String  @db.VarChar(255) // ブランド名
  description   String  @db.VarChar(255) // NFTの説明
  royalty_first Decimal @db.Decimal(6, 3) // NFTの流通によって得られるロイアリティの割合

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model series_nfts {
  foreign_id reserved_nfts @relation(fields: [series_id], references: [series_id])
  series_id  String        @unique @db.Uuid

  nft_id String @unique @db.Uuid

  nft_status nft_status?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model nft_status {
  foreign_id series_nfts @relation(fields: [nft_id], references: [nft_id])
  nft_id     String      @unique @db.Uuid

  nft_code Int     @db.SmallInt
  is_used  Boolean

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}
